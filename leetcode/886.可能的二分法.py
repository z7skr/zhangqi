# @lc app=leetcode.cn id=886 lang=python3
# [886] 可能的二分法
# https://leetcode.cn/problems/possible-bipartition/description/
# Medium (52.25%)
# Testcase Example:  '4\n[[1,2],[1,3],[2,4]]'
# 给定一组 n 人（编号为 1, 2, ..., n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。
# 给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和
# bi的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。
# 示例 1：
# 输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]
# 输出：true
# 解释：group1 [1,4], group2 [2,3]
# 示例 2：
# 输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]
# 输出：false
# 示例 3：
# 输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
# 输出：false
# 提示：
# 1 <= n <= 2000
# 0 <= dislikes.length <= 10^4
# dislikes[i].length == 2
# 1 <= dislikes[i][j] <= n
# ai < bi
# dislikes 中每一组都 不同


# @lc code=start
from functools import reduce


class Solution:
    from typing import List

    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        def traverse():
            g1, g2 = [], []
            visited = []  # 满足过的条件记录
            while len(visited) < len(dislikes):
                v = len(visited)
                for i, (a, b) in enumerate(dislikes):
                    if i in visited:
                        continue
                    elif a in g1 and b in g1 or a in g2 and b in g2:
                        return False  # 矛盾
                    elif a in g1 and b in g2 or a in g2 and b in g1:
                        visited.append(i)  # 已满足
                    # 根据依赖分组
                    elif a in g1:
                        g2.append(b)
                        visited.append(i)
                    elif a in g2:
                        g1.append(b)
                        visited.append(i)
                    elif b in g1:
                        g2.append(a)
                        visited.append(i)
                    elif b in g2:
                        g1.append(a)
                        visited.append(i)
                # 如果没有新增点到某组, 说明这些 dislike 的点和之前的都不一样
                # 随便给一组就好(初始情况也一样)
                if v == len(visited):
                    for i, (a, b) in enumerate(dislikes):
                        if i not in visited:
                            g1.append(a)
                            g2.append(b)
                            visited.append(i)
                            break
            return True

        def dfs():
            def dfs(i):
                if i == len(dislikes):
                    res[0] = True
                if res[0]:
                    return True
                if g1 and g1[-1] in g2 or g2 and g2[-1] in g1:
                    return False
                a, b = dislikes[i]
                r = False
                for x, y in ((a, b), (b, a)):
                    if x in g2 or y in g1:
                        continue
                    g1.append(x)
                    g2.append(y)
                    r = r or dfs(i + 1)
                    g1.pop()
                    g2.pop()
                return r

            res = [False]
            g1, g2 = [], []
            dfs(0)
            return res[0]

        return dfs()


# @lc code=end

func = Solution().possibleBipartition
n = 4
dislikes = [[1, 2], [1, 3], [2, 4]]
print(func(n, dislikes))
# true
n = 3
dislikes = [[1, 2], [1, 3], [2, 3]]
print(func(n, dislikes))
# false
n = 5
dislikes = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]]
print(func(n, dislikes))
# false
n = 5
dislikes = [[1, 2], [3, 4], [4, 5], [3, 5]]
print(func(n, dislikes))
# false
n = 100
dislikes = [
    [60, 69],
    [3, 35],
    [81, 93],
    [35, 41],
    [73, 82],
    [54, 55],
    [39, 45],
    [31, 80],
    [45, 61],
    [78, 98],
    [68, 92],
    [26, 54],
    [14, 77],
    [20, 32],
    [6, 23],
    [21, 37],
    [95, 98],
    [73, 91],
    [34, 41],
    [79, 85],
    [35, 52],
    [42, 57],
    [90, 95],
    [37, 54],
    [76, 87],
    [18, 62],
    [33, 80],
    [47, 64],
    [57, 90],
    [58, 72],
    [1, 33],
    [87, 94],
    [7, 15],
    [72, 74],
    [73, 92],
    [29, 88],
    [72, 80],
    [8, 25],
    [30, 76],
    [38, 60],
    [89, 93],
    [50, 51],
    [47, 73],
    [18, 72],
    [4, 11],
    [21, 30],
    [59, 85],
    [80, 98],
    [93, 96],
    [32, 49],
    [33, 60],
    [31, 33],
    [74, 75],
    [23, 31],
    [38, 93],
    [47, 96],
    [65, 81],
    [29, 75],
    [89, 91],
    [44, 67],
    [46, 92],
    [40, 99],
    [10, 100],
    [56, 70],
    [93, 95],
    [85, 98],
    [28, 83],
    [80, 89],
    [26, 45],
    [37, 76],
    [29, 48],
    [3, 37],
    [59, 64],
    [86, 88],
    [17, 44],
    [89, 92],
    [5, 82],
    [50, 63],
    [3, 4],
    [51, 62],
    [3, 42],
    [68, 100],
    [60, 73],
    [9, 37],
    [39, 87],
    [78, 95],
    [79, 87],
    [35, 54],
    [75, 95],
    [90, 93],
    [54, 79],
    [13, 49],
    [17, 81],
    [31, 97],
    [90, 97],
    [9, 98],
    [80, 87],
    [84, 96],
    [71, 95],
    [59, 94],
    [49, 100],
    [97, 98],
    [61, 92],
    [36, 82],
    [15, 64],
    [3, 70],
    [43, 47],
    [5, 21],
    [4, 35],
    [64, 78],
    [22, 81],
    [9, 96],
    [69, 90],
    [24, 42],
    [46, 61],
    [96, 97],
    [55, 84],
    [14, 37],
    [65, 69],
    [68, 99],
    [14, 71],
    [20, 30],
    [21, 31],
    [72, 89],
    [53, 89],
    [51, 73],
    [50, 89],
    [65, 87],
    [10, 24],
    [30, 95],
    [22, 66],
    [85, 96],
    [24, 49],
    [68, 81],
    [98, 99],
    [1, 43],
    [39, 66],
    [95, 97],
    [2, 80],
    [24, 70],
    [30, 55],
    [88, 90],
    [17, 34],
    [37, 47],
    [42, 58],
    [22, 99],
    [76, 84],
    [41, 78],
    [11, 76],
    [69, 76],
    [65, 100],
    [50, 61],
    [83, 89],
    [55, 96],
    [47, 71],
    [18, 82],
    [27, 100],
    [58, 77],
    [91, 96],
    [33, 91],
    [3, 44],
    [10, 81],
    [72, 97],
    [87, 93],
    [58, 60],
    [11, 87],
    [87, 98],
    [73, 95],
    [78, 93],
    [9, 13],
    [16, 48],
    [90, 91],
    [55, 67],
    [68, 71],
    [69, 95],
    [67, 99],
    [32, 88],
    [24, 37],
    [48, 98],
    [30, 31],
    [93, 99],
    [61, 90],
    [62, 88],
    [74, 98],
    [98, 100],
    [48, 94],
    [29, 78],
    [27, 98],
    [74, 86],
    [90, 99],
    [60, 99],
    [13, 28],
    [32, 95],
    [89, 98],
    [70, 76],
    [96, 99],
    [69, 98],
    [28, 50],
    [14, 69],
    [29, 51],
    [82, 100],
    [2, 87],
    [13, 71],
    [75, 79],
    [30, 50],
    [13, 33],
    [18, 44],
    [67, 75],
    [20, 74],
    [42, 91],
    [17, 91],
    [7, 99],
    [70, 71],
    [62, 96],
    [57, 82],
    [58, 64],
    [36, 100],
    [35, 94],
    [3, 41],
    [86, 92],
    [99, 100],
    [7, 23],
    [13, 64],
    [73, 84],
    [88, 92],
    [10, 39],
    [52, 66],
    [18, 39],
    [75, 90],
    [40, 72],
    [54, 72],
    [2, 98],
    [39, 43],
    [55, 68],
    [67, 86],
    [24, 58],
    [36, 99],
    [87, 97],
    [1, 34],
    [86, 87],
    [87, 95],
    [34, 35],
    [79, 83],
    [35, 58],
    [27, 73],
    [30, 79],
    [6, 95],
    [67, 95],
    [19, 76],
    [11, 27],
    [58, 82],
    [21, 40],
    [93, 97],
    [35, 82],
    [14, 64],
    [11, 78],
    [63, 70],
    [51, 68],
    [49, 84],
    [87, 92],
    [77, 82],
    [60, 97],
    [43, 57],
    [49, 82],
    [47, 87],
    [68, 72],
    [17, 96],
    [56, 69],
    [20, 60],
    [71, 80],
    [95, 100],
    [27, 71],
    [13, 95],
    [78, 87],
    [18, 91],
    [19, 40],
    [52, 58],
    [88, 99],
    [23, 96],
    [78, 99],
    [83, 84],
    [68, 93],
    [60, 82],
    [84, 88],
    [35, 64],
    [13, 100],
    [46, 50],
    [53, 61],
    [81, 85],
    [80, 81],
    [3, 49],
    [23, 54],
    [73, 90],
    [88, 94],
    [31, 50],
    [79, 84],
    [21, 42],
    [11, 67],
    [36, 60],
    [56, 83],
    [21, 67],
    [45, 70],
    [80, 86],
    [85, 95],
    [71, 92],
    [10, 93],
    [82, 84],
    [4, 43],
    [19, 21],
    [34, 71],
    [97, 99],
    [12, 91],
    [2, 65],
    [53, 81],
    [10, 54],
    [77, 87],
    [2, 50],
    [64, 77],
    [26, 31],
    [94, 99],
    [85, 88],
    [18, 99],
    [73, 98],
    [19, 26],
    [97, 100],
    [24, 88],
    [72, 88],
    [4, 70],
    [78, 82],
    [14, 27],
    [91, 92],
    [33, 97],
    [32, 36],
    [32, 73],
    [73, 77],
    [54, 57],
    [11, 95],
    [34, 45],
    [41, 62],
    [74, 93],
    [9, 73],
    [13, 17],
    [69, 87],
    [57, 86],
    [87, 100],
    [34, 80],
    [91, 97],
    [70, 93],
    [62, 78],
    [75, 98],
    [58, 63],
    [49, 68],
    [31, 60],
    [75, 94],
    [83, 95],
    [4, 82],
    [44, 50],
    [42, 78],
    [55, 64],
    [38, 56],
    [95, 99],
    [33, 85],
    [67, 96],
    [84, 97],
    [61, 97],
    [93, 100],
    [72, 77],
    [30, 32],
    [15, 67],
    [13, 79],
    [17, 55],
    [86, 93],
    [16, 91],
    [21, 74],
    [19, 54],
    [89, 99],
    [57, 74],
    [52, 54],
    [45, 60],
    [81, 95],
    [30, 43],
    [52, 92],
    [72, 90],
    [50, 86],
    [28, 94],
    [25, 96],
    [43, 61],
    [17, 66],
    [64, 70],
    [22, 76],
    [86, 94],
    [16, 82],
    [19, 63],
    [89, 100],
    [52, 90],
    [1, 48],
    [58, 67],
    [84, 93],
    [46, 47],
    [23, 59],
    [76, 97],
    [87, 99],
    [11, 55],
    [36, 53],
    [20, 80],
    [92, 95],
    [67, 87],
    [84, 90],
    [80, 83],
    [35, 90],
    [56, 63],
    [70, 83],
    [60, 68],
    [25, 94],
    [72, 98],
    [82, 89],
    [45, 99],
    [37, 70],
    [58, 87],
    [62, 86],
    [79, 80],
    [53, 60],
    [3, 28],
    [10, 86],
    [30, 78],
    [42, 76],
    [67, 92],
    [64, 74],
    [27, 29],
    [35, 77],
    [33, 77],
    [70, 74],
    [85, 100],
    [57, 71],
    [4, 23],
    [37, 79],
    [93, 98],
    [61, 89],
    [25, 73],
    [10, 28],
    [42, 81],
    [21, 72],
    [56, 68],
    [44, 95],
    [92, 97],
    [14, 32],
    [70, 77],
    [96, 100],
    [86, 96],
]
print(func(n, dislikes))
# false
